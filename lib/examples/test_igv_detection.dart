/// Ejemplo de prueba para la detecci√≥n mejorada de IGV
/// Demuestra c√≥mo la funci√≥n _buscarIGVMejorado captura el formato "IGV: S/ [monto]"

void main() {
  // Simulaci√≥n de diferentes formatos de IGV que pueden aparecer en facturas
  final ejemplosTextoIGV = [
    // Formato espec√≠fico que mencionaste
    'SUBTOTAL: S/ 100.00\nIGV: S/ 18.00\nTOTAL: S/ 118.00',

    // Variaciones del formato principal
    'IGV: S/18.00',
    'IGV:S/ 25.50',
    'IGV : S/ 36.90',
    'I.G.V.: S/ 45.00',
    'IGV S/ 12.60',

    // Formatos con porcentaje
    'IGV 18%: S/ 27.00',
    'IGV (18%): S/ 33.30',
    'I.G.V. 18%: S/ 15.75',
    'I.G.V. (18%): S/ 21.42',

    // Formatos m√°s complejos
    'IMPUESTO GENERAL A LAS VENTAS: S/ 54.00',
    'IGV 18% S/ 42.30',
    'I.G.V. : S/ 67.80',

    // Casos con comas en n√∫meros grandes
    'IGV: S/ 1,250.50',
    'IGV: S/ 2,845.32',

    // Casos edge (l√≠mites)
    'IGV: S/ 0.18',
    'IGV: S/ 999.99',
  ];

  print('üß™ === PRUEBAS DE DETECCI√ìN DE IGV MEJORADA ===\n');

  for (int i = 0; i < ejemplosTextoIGV.length; i++) {
    final texto = ejemplosTextoIGV[i];
    print('üìÑ Prueba ${i + 1}: "$texto"');

    // Aqu√≠ normalmente llamar√≠as a la funci√≥n real:
    // final igvDetectado = FacturaIA._buscarIGVMejorado(texto);

    // Para el ejemplo, simulo la detecci√≥n
    final igvDetectado = _simularDeteccionIGV(texto);

    if (igvDetectado != null) {
      print('   ‚úÖ IGV detectado: S/ $igvDetectado');
    } else {
      print('   ‚ùå IGV no detectado');
    }
    print('');
  }

  print('üéØ === AN√ÅLISIS DE PRECISI√ìN ===');
  print('‚úÖ Formatos soportados:');
  print('   ‚Ä¢ IGV: S/ [monto] - Formato exacto que mencionaste');
  print('   ‚Ä¢ IGV:S/[monto] - Sin espacios');
  print('   ‚Ä¢ I.G.V.: S/ [monto] - Con puntos');
  print('   ‚Ä¢ IGV S/ [monto] - Sin dos puntos');
  print('   ‚Ä¢ IGV 18%: S/ [monto] - Con porcentaje');
  print('   ‚Ä¢ IGV (18%): S/ [monto] - Porcentaje entre par√©ntesis');
  print('   ‚Ä¢ N√∫meros con comas (1,250.50)');
  print('   ‚Ä¢ Validaci√≥n de rangos razonables (0.01 - 9999.99)');
}

/// Simulaci√≥n de la l√≥gica de detecci√≥n para el ejemplo
String? _simularDeteccionIGV(String texto) {
  // Patrones espec√≠ficos para el formato "IGV: S/ [monto]"
  final patronesEspecificosSoles = [
    RegExp(r'IGV\s*:\s*S/\s*([\d,]+\.?\d{0,2})', caseSensitive: false),
    RegExp(r'I\.G\.V\.\s*:\s*S/\s*([\d,]+\.?\d{0,2})', caseSensitive: false),
    RegExp(r'IGV\s+S/\s*([\d,]+\.?\d{0,2})', caseSensitive: false),
    RegExp(r'IGV\s*18%\s*[:\s]*S/\s*([\d,]+\.?\d{0,2})', caseSensitive: false),
    RegExp(
      r'IGV\s*\(18%\)\s*[:\s]*S/\s*([\d,]+\.?\d{0,2})',
      caseSensitive: false,
    ),
  ];

  for (final patron in patronesEspecificosSoles) {
    final match = patron.firstMatch(texto);
    if (match != null) {
      final igv = match.group(1)!.replaceAll(',', '');
      final numero = double.tryParse(igv);
      if (numero != null && numero > 0 && numero < 10000) {
        return numero.toStringAsFixed(2);
      }
    }
  }

  return null;
}
