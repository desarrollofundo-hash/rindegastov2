// ignore_for_file: avoid_print

import 'package:flutter/material.dart';
import 'package:flutter_speed_dial/flutter_speed_dial.dart';
import '../models/reporte_model.dart';
import '../screens/qr_scanner_screen.dart';
import 'package:intl/intl.dart';

enum EstadoReporte { todos, borrador, enviado }

class ReportesList extends StatefulWidget {
  final List<Reporte> reportes;
  final Future<void> Function() onRefresh;
  final bool isLoading;

  const ReportesList({
    super.key,
    required this.reportes,
    required this.onRefresh,
    this.isLoading = false,
  });

  @override
  State<ReportesList> createState() => _ReportesListState();
}

class _ReportesListState extends State<ReportesList>
    with TickerProviderStateMixin {
  late AnimationController _fabAnimationController;
  late Animation<double> _fabAnimation;

  @override
  void initState() {
    super.initState();
    _fabAnimationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _fabAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _fabAnimationController,
      curve: Curves.easeOutBack,
    ));
    _fabAnimationController.forward();
  }

  @override
  void dispose() {
    _fabAnimationController.dispose();
    super.dispose();
  }
  // Función para abrir el escáner QR
  void _abrirEscaneadorQR() async {
    try {
      final String? resultado = await Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => const QRScannerScreen()),
      );

      if (resultado != null && mounted) {
        // Aquí puedes manejar el resultado del código QR escaneado
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Código escaneado: $resultado'),
            backgroundColor: Colors.green,
            duration: const Duration(seconds: 3),
            action: SnackBarAction(
              label: 'Copiar',
              textColor: Colors.white,
              onPressed: () {
                // Aquí podrías copiar al portapapeles si quieres
                print('Código QR: $resultado');
              },
            ),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error al abrir escáner: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    if (widget.isLoading) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text('Cargando reportes...'),
          ],
        ),
      );
    }

    return Scaffold(
      body: DefaultTabController(
        length: 3,
        child: Column(
          children: [
            const TabBar(
              labelColor: Colors.indigo,
              unselectedLabelColor: Colors.grey,
              indicatorColor: Colors.indigo,
              tabs: [
                Tab(text: "Todos"),
                Tab(text: "Borradores"),
                Tab(text: "Enviados"),
              ],
            ),
            Expanded(
              child: TabBarView(
                children: [
                  _buildList(EstadoReporte.todos),
                  _buildList(EstadoReporte.borrador),
                  _buildList(EstadoReporte.enviado),
                ],
              ),
            ),
          ],
        ),
      ),

      // 👇 FAB expandible con animación
      floatingActionButton: ScaleTransition(
        scale: _fabAnimation,
        child: SpeedDial(
          icon: Icons.add,
          activeIcon: Icons.close,
          backgroundColor: Colors.indigo,
          overlayColor: Colors.black,
          overlayOpacity: 0.5,
          spacing: 12,
          spaceBetweenChildren: 8,
          animationCurve: Curves.easeOutBack,
          children: [
          SpeedDialChild(
            child: const Icon(Icons.document_scanner, color: Colors.white),
            backgroundColor: Colors.green,
            label: 'Escanear',
            onTap: () => print('Escanear'),
          ),

          SpeedDialChild(
            child: const Icon(Icons.qr_code_scanner, color: Colors.white),
            backgroundColor: Colors.blue,
            label: 'Lector de códigos',
            onTap: _abrirEscaneadorQR,
          ),
          SpeedDialChild(
            child: const Icon(Icons.note_add, color: Colors.white),
            backgroundColor: Colors.indigo,
            label: 'Crear gasto',
            onTap: () => print('Crear gasto seleccionado'),
          ),
        ],
        ),
      ),
    );
  }

  Widget _buildList(EstadoReporte filtro) {
    List<Reporte> data;

    switch (filtro) {
      case EstadoReporte.borrador:
        data = widget.reportes
            .where((r) => r.estado?.toUpperCase() == 'B')
            .toList();
        break;
      case EstadoReporte.enviado:
        data = widget.reportes
            .where((r) => r.estado?.toUpperCase() == 'E')
            .toList();
        break;
      case EstadoReporte.todos:
        data = widget.reportes;
        break;
    }

    return RefreshIndicator(
      onRefresh: widget.onRefresh,
      child: data.isEmpty
          ? ListView(
              children: const [
                SizedBox(height: 100),
                Center(
                  child: Text(
                    "No hay reportes disponibles",
                    style: TextStyle(color: Colors.black, fontSize: 16),
                  ),
                ),
              ],
            )
          : ListView.builder(
              padding: const EdgeInsets.all(12),
              itemCount: data.length,
              itemBuilder: (context, index) {
                final reporte = data[index];
                final fechaOriginal = DateTime.tryParse(reporte.fecha ?? '');
                final fechaCorta = fechaOriginal != null
                    ? DateFormat('dd/MM/yy').format(fechaOriginal)
                    : 'Fecha inválida';

                return Dismissible(
                  key: Key('reporte_${reporte.id}'),
                  direction: DismissDirection.endToStart,
                  background: Container(
                    alignment: Alignment.centerRight,
                    padding: const EdgeInsets.only(right: 20),
                    decoration: BoxDecoration(
                      color: Colors.red,
                      borderRadius: BorderRadius.circular(5),
                    ),
                    child: const Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        Icon(Icons.delete, color: Colors.white, size: 24),
                        SizedBox(width: 8),
                        Text(
                          'Eliminar',
                          style: TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                  ),
                  confirmDismiss: (direction) async {
                    return await _mostrarConfirmacionEliminar(context, reporte);
                  },
                  onDismissed: (direction) {
                    _eliminarReporte(reporte, index);
                  },
                  child: _AnimatedReporteCard(
                    reporte: reporte,
                    fechaCorta: fechaCorta,
                    onTap: () {
                      print('Tap en reporte: ${reporte.num}');
                    },
                    onLongPress: () {
                      _mostrarMenuContextual(context, reporte, index);
                    },
                  ),
                  duration: const Duration(milliseconds: 200),
                  curve: Curves.easeInOut,
                  child: Card(
                    color: Colors.white,
                    elevation: 1,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(5),
                    ),
                    margin: const EdgeInsets.symmetric(vertical: 2),
                    child: InkWell(
                      borderRadius: BorderRadius.circular(5),
                      onTap: () {
                        // Acción al hacer tap normal
                        print('Tap en reporte: ${reporte.num}');
                      },
                      onLongPress: () {
                        _mostrarMenuContextual(context, reporte, index);
                      },
                      child: Container(
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(5),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(2),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Header con número de reporte y estado
                              Row(
                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              '${reporte.desemp} ',
                              style: const TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 14,
                                color: Colors.black,
                              ),
                            ),
                            Text(
                              '${reporte.id} PEN',
                              style: const TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 16,
                                color: Colors.indigo,
                              ),
                            ),
                          ],
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              '${reporte.dessed} ',
                              style: const TextStyle(
                                fontSize: 10,
                                color: Colors.black,
                              ),
                            ),
                            Chip(
                              label: Text(
                                '${reporte.estado}',
                                style: const TextStyle(
                                  fontSize: 12,
                                  color: Colors.white,
                                ),
                              ),
                              backgroundColor: _getEstadoColor(reporte.estado),
                              padding: const EdgeInsets.symmetric(
                                horizontal: 6,
                                vertical: 0,
                              ),
                              labelPadding: const EdgeInsets.symmetric(
                                horizontal: 4,
                              ),
                              materialTapTargetSize:
                                  MaterialTapTargetSize.shrinkWrap,
                            ),
                          ],
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              fechaCorta,
                              style: const TextStyle(
                                fontSize: 11,
                                color: Colors.black,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 1),
                    },
                  ),
                );
              },
            ),
    );
  }

  // 🎨 Método para mostrar menú contextual animado
  void _mostrarMenuContextual(BuildContext context, Reporte reporte, int index) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (BuildContext context) {
        return AnimatedContainer(
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOutCubic,
          decoration: const BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(20),
              topRight: Radius.circular(20),
            ),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // Indicador de arrastre
              Container(
                margin: const EdgeInsets.symmetric(vertical: 10),
                height: 4,
                width: 40,
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
              
              // Título
              Padding(
                padding: const EdgeInsets.all(16),
                child: Text(
                  'Reporte #${reporte.num}',
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              
              // Opciones del menú
              ListTile(
                leading: const Icon(Icons.edit, color: Colors.blue),
                title: const Text('Editar'),
                onTap: () {
                  Navigator.pop(context);
                  _editarReporte(reporte);
                },
              ),
              ListTile(
                leading: const Icon(Icons.delete, color: Colors.red),
                title: const Text('Eliminar'),
                onTap: () {
                  Navigator.pop(context);
                  _confirmarEliminar(context, reporte, index);
                },
              ),
              ListTile(
                leading: const Icon(Icons.visibility, color: Colors.green),
                title: const Text('Ver detalles'),
                onTap: () {
                  Navigator.pop(context);
                  _verDetalles(reporte);
                },
              ),
              const SizedBox(height: 20),
            ],
          ),
        );
      },
    );
  }

  // 🎯 Acciones del menú
  Future<bool?> _mostrarConfirmacionEliminar(BuildContext context, Reporte reporte) async {
    return await showDialog<bool>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
          title: const Row(
            children: [
              Icon(Icons.warning, color: Colors.orange, size: 28),
              SizedBox(width: 10),
              Text('Confirmar eliminación'),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('¿Estás seguro de eliminar el reporte #${reporte.num}?'),
              const SizedBox(height: 10),
              const Text(
                'Esta acción no se puede deshacer.',
                style: TextStyle(
                  color: Colors.red,
                  fontSize: 12,
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context, false),
              child: const Text('Cancelar'),
            ),
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
              ),
              onPressed: () => Navigator.pop(context, true),
              child: const Text('Eliminar', style: TextStyle(color: Colors.white)),
            ),
          ],
        );
      },
    );
  }

  void _editarReporte(Reporte reporte) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Editando reporte #${reporte.num}'),
        backgroundColor: Colors.blue,
      ),
    );
    // Aquí implementarías la navegación a pantalla de edición
  }

  void _verDetalles(Reporte reporte) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Viendo detalles de reporte #${reporte.num}'),
        backgroundColor: Colors.green,
      ),
    );
    // Aquí implementarías la navegación a pantalla de detalles
  }

  void _confirmarEliminar(BuildContext context, Reporte reporte, int index) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Confirmar eliminación'),
          content: Text('¿Estás seguro de eliminar el reporte #${reporte.num}?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancelar'),
            ),
            ElevatedButton(
              style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
              onPressed: () {
                Navigator.pop(context);
                _eliminarReporte(reporte, index);
              },
              child: const Text('Eliminar'),
            ),
          ],
        );
      },
    );
  }

  void _eliminarReporte(Reporte reporte, int index) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Reporte #${reporte.num} eliminado'),
        backgroundColor: Colors.red,
        action: SnackBarAction(
          label: 'Deshacer',
          textColor: Colors.white,
          onPressed: () {
            // Implementar funcionalidad de deshacer
          },
        ),
      ),
    );
    // Aquí implementarías la eliminación real del reporte
  }

  Color? _getEstadoColor(String? estado) {
    switch (estado?.toUpperCase()) {
      case 'S':
        return Colors.green[400];
      case 'P':
        return Colors.orange[400];
      case 'E': // Enviado
        return Colors.blue[400];
      case 'B': // Borrador
        return Colors.grey[400];
      case 'C':
        return Colors.green[700];
      case 'F':
        return Colors.red[400];
      case 'SYNC':
        return Colors.teal[400];
      default:
        return Colors.grey[400];
    }
  }
}

// 🎨 Widget animado para cada card de reporte
class _AnimatedReporteCard extends StatefulWidget {
  final Reporte reporte;
  final String fechaCorta;
  final VoidCallback onTap;
  final VoidCallback onLongPress;

  const _AnimatedReporteCard({
    required this.reporte,
    required this.fechaCorta,
    required this.onTap,
    required this.onLongPress,
  });

  @override
  State<_AnimatedReporteCard> createState() => _AnimatedReporteCardState();
}

class _AnimatedReporteCardState extends State<_AnimatedReporteCard>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _scaleAnimation;
  late Animation<double> _elevationAnimation;
  bool _isPressed = false;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 150),
      vsync: this,
    );
    
    _scaleAnimation = Tween<double>(
      begin: 1.0,
      end: 0.95,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOut,
    ));

    _elevationAnimation = Tween<double>(
      begin: 1.0,
      end: 8.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOut,
    ));
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  void _onTapDown(TapDownDetails details) {
    setState(() {
      _isPressed = true;
    });
    _animationController.forward();
  }

  void _onTapUp(TapUpDetails details) {
    setState(() {
      _isPressed = false;
    });
    _animationController.reverse();
    widget.onTap();
  }

  void _onTapCancel() {
    setState(() {
      _isPressed = false;
    });
    _animationController.reverse();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _animationController,
      builder: (context, child) {
        return Transform.scale(
          scale: _scaleAnimation.value,
          child: Card(
            color: Colors.white,
            elevation: _elevationAnimation.value,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(5),
            ),
            margin: const EdgeInsets.symmetric(vertical: 2),
            child: Material(
              color: Colors.transparent,
              child: InkWell(
                borderRadius: BorderRadius.circular(5),
                onTapDown: _onTapDown,
                onTapUp: _onTapUp,
                onTapCancel: _onTapCancel,
                onLongPress: widget.onLongPress,
                splashColor: Colors.indigo.withOpacity(0.1),
                highlightColor: Colors.indigo.withOpacity(0.05),
                child: AnimatedContainer(
                  duration: const Duration(milliseconds: 200),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(5),
                    border: _isPressed
                        ? Border.all(color: Colors.indigo.withOpacity(0.3), width: 1)
                        : null,
                  ),
                  child: Padding(
                    padding: const EdgeInsets.all(12),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Header con número de reporte y estado
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Hero(
                              tag: 'reporte_num_${widget.reporte.id}',
                              child: Text(
                                '#${widget.reporte.num}',
                                style: const TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.w600,
                                  color: Colors.black,
                                ),
                              ),
                            ),
                            Hero(
                              tag: 'reporte_estado_${widget.reporte.id}',
                              child: Chip(
                                label: Text(
                                  _getEstadoTexto(widget.reporte.estado),
                                  style: const TextStyle(
                                    fontSize: 12,
                                    color: Colors.white,
                                  ),
                                ),
                                backgroundColor: _getEstadoColor(widget.reporte.estado),
                                padding: const EdgeInsets.symmetric(
                                  horizontal: 6,
                                  vertical: 0,
                                ),
                                labelPadding: const EdgeInsets.symmetric(
                                  horizontal: 4,
                                ),
                                materialTapTargetSize:
                                    MaterialTapTargetSize.shrinkWrap,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              widget.fechaCorta,
                              style: const TextStyle(
                                fontSize: 11,
                                color: Colors.grey,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  String _getEstadoTexto(String? estado) {
    switch (estado?.toUpperCase()) {
      case 'S':
        return 'Sincronizado';
      case 'P':
        return 'Pendiente';
      case 'E':
        return 'Enviado';
      case 'B':
        return 'Borrador';
      case 'C':
        return 'Completado';
      case 'F':
        return 'Fallido';
      case 'SYNC':
        return 'Sync';
      default:
        return 'Desconocido';
    }
  }

  Color? _getEstadoColor(String? estado) {
    switch (estado?.toUpperCase()) {
      case 'S':
        return Colors.green[400];
      case 'P':
        return Colors.orange[400];
      case 'E':
        return Colors.blue[400];
      case 'B':
        return Colors.grey[400];
      case 'C':
        return Colors.green[700];
      case 'F':
        return Colors.red[400];
      case 'SYNC':
        return Colors.teal[400];
      default:
        return Colors.grey[400];
    }
  }
}
